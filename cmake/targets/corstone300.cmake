# SET(CMAKE_TOOLCHAIN_FILE "?")

SET(CMAKE_SYSTEM_PROCESSOR "cortex-m55") # TODO: make this variable
IF(NOT ARM_CPU)
    SET(ARM_CPU ${CMAKE_SYSTEM_PROCESSOR})
ELSE()
    SET(CMAKE_SYSTEM_PROCESSOR ${ARM_CPU})
ENDIF()
SET(CMSIS_PATH
    ""
    CACHE PATH "Path to CMSIS."
)
SET(CMSISNN_PATH
    ""
    CACHE PATH "Path to CMSIS-NN."
)

ADD_COMPILE_OPTIONS(
    -fomit-frame-pointer
    # -Werror
    -Wunused-variable
    -Wunused-function
    -Wno-redundant-decls
)

SET(FVP_CORSTONE_300_PATH
    "${CMSISNN_PATH}/CMSIS/NN/Tests/UnitTest/Corstone-300"
    CACHE PATH "Dependencies for using FVP based on Arm Corstone-300 software."
)
# set(CMAKE_EXECUTABLE_SUFFIX ".elf")

ADD_LIBRARY(
    retarget STATIC
    # ${FVP_CORSTONE_300_PATH}/retarget.c
    ${CMAKE_CURRENT_LIST_DIR}/corstone300/retarget.c
    # ${FVP_CORSTONE_300_PATH}/uart.c)
    ${CMAKE_CURRENT_LIST_DIR}/corstone300/uart.c
)

# Build CMSIS startup dependencies based on TARGET_CPU.
STRING(REGEX REPLACE "^cortex-m([0-9]+).*$" "ARMCM\\1" ARM_CPU_SHORT ${CMAKE_SYSTEM_PROCESSOR})
IF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "cortex-m33")
    SET(ARM_FEATURES "_DSP_FP")
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "cortex-m4")
    SET(ARM_FEATURES "_FP")
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "cortex-m7")
    SET(ARM_FEATURES "_DP")
ELSE()
    SET(ARM_FEATURES "")
ENDIF()
ADD_LIBRARY(cmsis_startup STATIC)
SET(CMSIS_STARTUP_SRCS ${CMSIS_PATH}/Device/ARM/${ARM_CPU_SHORT}/Source/startup_${ARM_CPU_SHORT}.c
                       ${CMSIS_PATH}/Device/ARM/${ARM_CPU_SHORT}/Source/system_${ARM_CPU_SHORT}.c
)
# message(STATUS "CMSIS_STARTUP_SRCS=${CMSIS_STARTUP_SRCS}")
TARGET_SOURCES(cmsis_startup PRIVATE ${CMSIS_STARTUP_SRCS})
TARGET_INCLUDE_DIRECTORIES(
    cmsis_startup PUBLIC ${CMSIS_PATH}/Device/ARM/${ARM_CPU_SHORT}/Include ${CMSIS_PATH}/CMSIS/Core/Include
)
TARGET_COMPILE_OPTIONS(cmsis_startup INTERFACE -include${ARM_CPU_SHORT}${ARM_FEATURES}.h)
TARGET_COMPILE_DEFINITIONS(cmsis_startup PRIVATE ${ARM_CPU_SHORT}${ARM_FEATURES})

# Linker file settings.
SET(LINK_FILE "${CMAKE_CURRENT_LIST_DIR}/corstone300/linker.ld")
SET(LINK_FILE_OPTION "-T")
SET(LINK_ENTRY_OPTION "")
SET(LINK_ENTRY "")

SET(TARGET_SYSTEM_LIBS retarget cmsis_startup)
SET(TARGET_SYSTEM_DEFS USING_FVP_CORSTONE_300)
SET(TARGET_SYSTEM_LINK_OPTIONS ${LINK_FILE_OPTION} ${LINK_FILE} ${LINK_ENTRY_OPTION} ${LINK_ENTRY})
SET(TARGET_SYSTEM_PROPERTIES_LINK_DEPENDS ${LINK_FILE})

MACRO(COMMON_ADD_EXECUTABLE TARGET_NAME)
    ADD_EXECUTABLE(${TARGET_NAME} ${ARGN})
    TARGET_LINK_LIBRARIES(${TARGET_NAME} PRIVATE retarget)
    TARGET_LINK_LIBRARIES(${TARGET_NAME} PRIVATE $<TARGET_OBJECTS:cmsis_startup> cmsis_startup)
    ADD_DEPENDENCIES(${TARGET_NAME} retarget cmsis_startup)
    TARGET_COMPILE_DEFINITIONS(${TARGET_NAME} PUBLIC USING_FVP_CORSTONE_300)
    TARGET_LINK_OPTIONS(${TARGET_NAME} PRIVATE ${LINK_FILE_OPTION} ${LINK_FILE} ${LINK_ENTRY_OPTION} ${LINK_ENTRY})
    SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES LINK_DEPENDS ${LINK_FILE})
    TARGET_LINK_OPTIONS(${TARGET_NAME} PRIVATE "--specs=nosys.specs")
ENDMACRO()

MACRO(COMMON_ADD_LIBRARY TARGET_NAME)
    ADD_LIBRARY(${TARGET_NAME} ${ARGN})
    IF(ARM_DSP)
        IF(NOT CMSIS_PATH)
            MESSAGE(FATAL_ERROR "Missing value: CMSIS_PATH")
        ENDIF()
        TARGET_INCLUDE_DIRECTORIES(
            ${TARGET_NAME} PUBLIC ${CMSIS_PATH}/CMSIS/Core/Include ${CMSIS_PATH}/CMSIS/DSP/Include
                                  ${CMSIS_PATH}/CMSIS/NN/Include
        )
    ENDIF()
ENDMACRO()

# Alternative: target_pre target_post hooks?
SET(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY")
