PROJECT(polybench)

SET(POLYBENCH_DIR
    ""
    CACHE PATH "polybench source directory"
)

IF(NOT POLYBENCH_DIR)
    MESSAGE(FATAL_ERROR "Undefined: POLYBENCH_DIR")
ENDIF()

SET(POLYBENCH_BENCHMARK
    ""
    CACHE STRING "Specify which benchmark to run."
)
# SET_PROPERTY(CACHE POLYBENCH_BENCHMARK PROPERTY STRINGS TODO)

SET(POLYBENCH_DATASET
    "LARGE_DATASET"
    CACHE STRING "Specify the dataset."
)
SET_PROPERTY(CACHE POLYBENCH_DATASET PROPERTY STRINGS MINI_DATASET SMALL_DATASET MEDIUM_DATASET LARGE_DATASET EXTRALARGE_DATASET)

IF(NOT POLYBENCH_BENCHMARK)
    MESSAGE(FATAL_ERROR "Undefined: POLYBENCH_BENCHMARK")
ENDIF()

SET(BENCH_DIR ${POLYBENCH_DIR}/${POLYBENCH_BENCHMARK})
FILE(GLOB BENCH_SRCS ${BENCH_DIR}/*.c)

get_filename_component(BENCH_NAME ${POLYBENCH_BENCHMARK} NAME)
SET(BENCH_FILE ${BENCH_DIR}/${BENCH_NAME}.c)
# LIST(REMOVE_ITEM BENCH_SRCS ${BENCH_FILE})

COMMON_ADD_LIBRARY(${PROJECT_NAME} STATIC polybench.c ${POLYBENCH_DIR}/utilities/polybench.c)
# COMMON_ADD_LIBRARY(${PROJECT_NAME} STATIC taclebench.c ${BENCH_SRCS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE m)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC . ${BENCH_DIR} ${POLYBENCH_DIR}/utilities)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC "${CMAKE_CURRENT_BINARY_DIR}")
TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PUBLIC ${POLYBENCH_DATASET})
CONFIGURE_FILE(polybench_wrapper.h.in ${CMAKE_CURRENT_BINARY_DIR}/polybench_wrapper.h @ONLY)

IF(${GLOBAL_ISEL})
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:C>:-mllvm -global-isel=1>")
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:CXX>:-mllvm -global-isel=1>")
SET(GLOBAL_ISEL_ABORT 2)
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:C>:-mllvm -global-isel-abort=${GLOBAL_ISEL_ABORT}>")
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:CXX>:-mllvm -global-isel-abort=${GLOBAL_ISEL_ABORT}>")
ENDIF()
