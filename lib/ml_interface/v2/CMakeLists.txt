PROJECT(ml_interface)

SET(MLONMCU_BACKEND
    ""
    CACHE STRING "Specify which backend to use."
)
SET_PROPERTY(CACHE MLONMCU_BACKEND PROPERTY STRINGS tflmc tflmi tvmaot tvmrt tvmcg)

SET(MLONMCU_FRAMEWORK
    ""
    CACHE STRING "Specify which backend to use."
)
SET_PROPERTY(CACHE MLONMCU_FRAMEWORK PROPERTY STRINGS tflm tvm)

INCLUDE(extras)

IF(TF_DIR)
    INCLUDE(LinkTFLite)
ENDIF()
IF(TVM_DIR)
    INCLUDE(LinkTVM)
ENDIF()


INCLUDE(backends/${MLONMCU_BACKEND})
INCLUDE(frameworks/${MLONMCU_FRAMEWORK})


INCLUDE(frameworks/${MLONMCU_FRAMEWORK}_mlif)

IF(MODEL_DIR)
    GET_FILENAME_COMPONENT(MODEL_SUPPORT_DIR ${MODEL_DIR}/support REALPATH)
    GET_FILENAME_COMPONENT(MODEL_NAME ${MODEL_DIR} NAME)
ENDIF()

COMMON_ADD_LIBRARY(${PROJECT_NAME}_base STATIC ml_interface_base.c)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_base PUBLIC support)
COMMON_ADD_LIBRARY(model_support_base STATIC support.c)
TARGET_INCLUDE_DIRECTORIES(model_support_base PUBLIC . ${EXTRA_INC})


ADD_SUBDIRECTORY(mlifio)
IF(MODEL_SUPPORT_DIR AND EXISTS ${MODEL_SUPPORT_DIR})
    ADD_SUBDIRECTORY(${MODEL_SUPPORT_DIR} custom_model_support)
    TARGET_LINK_LIBRARIES(model_support_base PUBLIC model_support)
ELSEIF(MODEL_SUPPORT_FILE AND EXISTS ${MODEL_SUPPORT_FILE})
    COMMON_ADD_LIBRARY(model_support STATIC ${MODEL_SUPPORT_FILE})
    TARGET_LINK_LIBRARIES(model_support PUBLIC support)
    TARGET_LINK_LIBRARIES(model_support PUBLIC mlifio)
    TARGET_INCLUDE_DIRECTORIES(model_support PUBLIC $<TARGET_PROPERTY:mlifio,INCLUDE_DIRECTORIES>)
    TARGET_LINK_LIBRARIES(model_support_base PUBLIC model_support)
ELSEIF(MODEL_SUPPORT_LIB AND EXISTS ${MODEL_SUPPORT_LIB})
    # TARGET_LINK_LIBRARIES(model_support PUBLIC ${MODEL_SUPPORT_LIB})
    TARGET_LINK_LIBRARIES(model_support_base PUBLIC ${MODEL_SUPPORT_LIB})
ELSE()
    ADD_SUBDIRECTORY(default_model_support)
ENDIF()
# TARGET_LINK_LIBRARIES(model_support PUBLIC ${PROJECT_NAME}_base)

# IF(NOT DATA_SRC)
# SET(DATA_SRC "default_data.c")
# ENDIF()

# TARGET_LINK_LIBRARIES(${PROJECT_NAME}_base PUBLIC support ${EXTRA_LIBS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_base PUBLIC . ${EXTRA_INC})

COMMON_ADD_LIBRARY(${PROJECT_NAME} STATIC ml_interface.c ${EXTRA_SRC})
# TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${PROJECT_NAME}_base model_support)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC support model_support_base ${EXTRA_LIBS})
IF(NUM_RUNS)
    TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PUBLIC NUM_RUNS=${NUM_RUNS})
ENDIF()
IF(BATCH_SIZE)
    TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PUBLIC BATCH_SIZE=${BATCH_SIZE})
ENDIF()
# Used to detect legacy mlonmcu versions
ADD_DEFINITIONS(-DMLONMCU_MODEL_SUPPORT)

IF(${GLOBAL_ISEL})
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:C>:-mllvm -global-isel=1>")
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:CXX>:-mllvm -global-isel=1>")
SET(GLOBAL_ISEL_ABORT 2)
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:C>:-mllvm -global-isel-abort=${GLOBAL_ISEL_ABORT}>")
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:CXX>:-mllvm -global-isel-abort=${GLOBAL_ISEL_ABORT}>")
ENDIF()
